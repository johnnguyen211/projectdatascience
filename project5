import pandas as pd
from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split
from surprise import accuracy

# --- PART 1: LOAD AND PREPARE THE DATA ---
# The Surprise library can load the MovieLens 100k dataset directly.
# The data consists of three columns: user_id, item_id (movie_id), and rating.
data = Dataset.load_builtin('ml-100k')

# You can also load your own data from a pandas DataFrame.
# For example, if you have a CSV file with user, item, and rating columns:
# df = pd.read_csv('your_ratings.csv')
# reader = Reader(rating_scale=(1, 5))
# data = Dataset.load_from_df(df[['user_id', 'item_id', 'rating']], reader)

# --- PART 2: BUILD AND TRAIN THE MODEL ---
# Split the dataset into a training set and a testing set.
# The test set will be used to evaluate the model's performance.
trainset, testset = train_test_split(data, test_size=0.2, random_state=42)

# We will use the Singular Value Decomposition (SVD) algorithm,
# a popular collaborative filtering algorithm.
# SVD works by decomposing the user-item interaction matrix.
model = SVD()

# Train the model on the training data.
model.fit(trainset)
print("Model training complete.")

# --- PART 3: EVALUATE THE MODEL ---
# Make predictions on the test set.
predictions = model.test(testset)

# Calculate and print the Root Mean Squared Error (RMSE) to evaluate performance.
# A lower RMSE value indicates better prediction accuracy.
print("--- Model Performance ---")
accuracy.rmse(predictions)

# --- PART 4: GENERATING RECOMMENDATIONS FOR A SPECIFIC USER ---
def get_recommendations(user_id, model, n=5):
    """
    Generates top N movie recommendations for a specific user.
    """
    # Create a list of all movies from the full dataset.
    full_trainset = data.build_full_trainset()
    all_movies = full_trainset.all_items()
    
    # Get a list of movies the user has already rated.
    # This ensures we don't recommend movies they've already seen.
    anti_testset = full_trainset.build_anti_testset()
    user_anti_testset = [item for item in anti_testset if item[0] == user_id]
    
    # Predict ratings for the movies the user hasn't rated.
    # 'anti_testset' contains all user-item pairs that are not in the training set.
    # We filter this to only include our target user.
    predictions = model.test(user_anti_testset)
    
    # Sort predictions by estimated rating in descending order.
    top_n_predictions = sorted(predictions, key=lambda x: x.est, reverse=True)[:n]

    # Print the recommendations.
    print(f"\n--- Top {n} Recommendations for User ID: {user_id} ---")
    for rec in top_n_predictions:
        movie_id = rec.iid
        estimated_rating = rec.est
        print(f"Movie ID: {movie_id}, Predicted Rating: {estimated_rating:.2f}")

# Example: Get recommendations for user with ID '196'.
get_recommendations(user_id='196', model=model, n=5)
