import pandas as pd
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 1. Load the dataset
# Load the Boston Housing dataset from scikit-learn
boston = load_boston() 
df = pd.DataFrame(boston.data, columns=boston.feature_names)
df['MEDV'] = boston.target

print("First 5 rows of the dataset:")
print(df.head())

# 2. Split the data into features (X) and target (y)
# X contains the features (e.g., crime rate, number of rooms)
# y contains the target variable (median home value, MEDV)
X = df.drop('MEDV', axis=1)
y = df['MEDV']

# Split the data into training and testing sets
# 80% of the data will be used for training, 20% for testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("\nShape of training and testing data:")
print(f"X_train shape: {X_train.shape}")
print(f"X_test shape: {X_test.shape}")

# 3. Train the model
# Initialize the Linear Regression model
model = LinearRegression()

# Train the model using the training data
# The model learns the relationship between X_train and y_train
model.fit(X_train, y_train)

# 4. Make predictions and evaluate the model
# Use the trained model to make predictions on the test data
y_pred = model.predict(X_test)

# Calculate performance metrics
# MSE measures the average squared difference between actual and predicted values
mse = mean_squared_error(y_test, y_pred)
# R-squared represents the proportion of the variance in the target variable
# that is predictable from the features. A higher value is better (closer to 1).
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation:")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R2): {r2:.2f}")
